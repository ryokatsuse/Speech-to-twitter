{"version":3,"file":"my-todo-list.js","sourceRoot":"","sources":["src/my-todo-list.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAS,KAAK,EAAC,MAAM,mBAAmB,CAAC;AAOxE,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,UAAU;IAA1C;;QAkCE,UAAK,GAAG,EAAE,CAAC;QAGX,cAAS,GAAG;YACV,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE;SAClC,CAAC;QAGF,aAAQ,GAAG,IAAI,CAAA;IAyCjB,CAAC;IApCC,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,SAAS,EAAC,GAAG,IAAI,CAAA;QAChC,OAAO,IAAI,CAAA;YACH,KAAK;;;wBAGO,IAAI,CAAC,oBAAoB;4BACrB,IAAI,CAAC,QAAQ,WAAW,IAAI,CAAC,OAAO;;UAEtD,SAAS,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACvB,IAAI,CAAA;;wBAEU,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ;yBACtC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBACvC,IAAI,CAAC,IAAI;kBACP,CACT;;KAEJ,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,IAAc;QAC1B,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;IACjE,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QAChE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;CACF,CAAA;AAjFQ,iBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BpB,CAAC;AAEA;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;yCAChB;AAGX;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;6CAG3B;AAGF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;4CACX;AAGf;IADC,KAAK,CAAC,aAAa,CAAC;yCACI;AA7Cd,UAAU;IADtB,aAAa,CAAC,cAAc,CAAC;GACjB,UAAU,CAmFtB;SAnFY,UAAU","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property, state, query} from 'lit/decorators.js';\n\ninterface ToDoItem  {\n  text: string,\n  completed: boolean\n}\n@customElement('my-todo-list')\nexport class MyToDoList extends LitElement {\n\n  static styles = css`\n\n  .todo-add-block {\n    margin-bottom: 20px;\n  }\n\n  .todo-input {\n    padding: 5px;\n  }\n\n  .todo-list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n\n  .todo-list > li {\n    cursor: pointer;\n    width: 300px;\n    margin-bottom: 10px;\n    border: 1px solid #333;\n    padding: 5px;\n  }\n  .completed {\n    text-decoration-line: line-through;\n    color: #777;\n  }\n  .normal {\n    \n  }\n`;\n  @property({ type: String })\n  title = '';\n\n  @property({attribute: false})\n  listItems = [\n    { text: '歯を磨く', completed: true }\n  ];\n\n  @property({type: Boolean})\n  disabled = true\n\n  @query('.todo-input')\n  input!: HTMLInputElement;\n\n  render() {\n    const { title, listItems} = this\n    return html`\n      <h2>${title}</h2>\n      <ul class=\"todo-list\">\n      <div class=\"todo-add-block\">\n        <input @keyup=${this.handleButtonDisabled} class=\"todo-input\" aria-label=\"アイテム\">\n        <button ?disabled=${this.disabled} @click=${this.addToDo}>追加</button>\n      </div>\n        ${listItems.map((item) =>\n          html`\n            <li\n                class=${item.completed ? 'completed' : 'normal'}\n                @click=${() => this.todoCompleted(item)}>\n              ${item.text}\n            </li>`\n        )}\n      </ul>\n    `;\n  }\n\n  todoCompleted(item: ToDoItem) {\n    item.completed = !item.completed;\n    this.requestUpdate();\n  }\n\n  handleButtonDisabled() {\n    this.input.value ? this.disabled = false : this.disabled = true\n  }\n\n  addToDo() {\n    this.listItems.push({text: this.input.value, completed: false});\n    this.input.value = '';\n    this.disabled = true\n    this.requestUpdate();\n  }\n}\n"]}